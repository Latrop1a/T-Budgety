/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view */ \"./src/view.js\");\n/*\r\nBudget App with ES5 Syntax\r\n\r\nFeature Ideas:\r\n-update into proper es6 and modules (medium)\r\n-webpack, npm\r\n-Delete all (done)\r\n-loop to make the thousand marker work with big numbers(done)\r\n\r\n-Date picker(medium?)\r\n-add categories and a chart split into the categories (hard)\r\n-add months dropdown with temp storing of months (hard?)\r\n-edit button on each list element (medium?)\r\n\r\n-add users and saving of data via NODE JS (very hard)\r\n\r\n\r\n*/\n\nconsole.log(_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); // BUDGET CONTROLLER\n\nlet budgetController = function () {\n  // Expense Constructor\n  class Expense {\n    constructor(id, description, value) {\n      this.id = id;\n      this.description = description;\n      this.value = value;\n      this.percentage = -1; //not yet defined\n    } // Method: Calculate percentage from total\n\n\n    calcPercentage(totalIncome) {\n      if (totalIncome > 0) {\n        this.percentage = Math.round(this.value / totalIncome * 100);\n      } else {\n        this.percentage = -1;\n      }\n    }\n\n    getPercentage() {\n      return this.percentage;\n    }\n\n  } // Income Contructor\n\n\n  class Income {\n    constructor(id, description, value) {\n      this.id = id;\n      this.description = description;\n      this.value = value;\n    }\n\n  }\n\n  let data = {\n    allItems: {\n      exp: [],\n      inc: []\n    },\n    totals: {\n      exp: 0,\n      inc: 0\n    },\n    budget: 0,\n    percentage: -1 //value -1 so we now it doesnt exist yet\n\n  }; //calculates total for either inc or exp\n\n  const calculateTotal = type => {\n    let sum = 0;\n    data.allItems[type].forEach(element => {\n      sum += element.value;\n    });\n    data.totals[type] = sum;\n  }; // gets new ID for addItem()\n\n\n  const getNewID = type => {\n    //select right array according to type\n    let array = data.allItems[type]; //check if any items before\n\n    if (array.length > 0) {\n      return array[array.length - 1].id + 1;\n    } else {\n      return 0;\n    }\n  }; //gets Index of Item\n\n\n  const getIndex = function (type, id) {\n    let ids, index; //need to consider that id != index\n    //map like forEach but returns a new array\n\n    ids = data.allItems[type].map(current => {\n      return current.id;\n    }); //returns the index of the id we are looking for\n\n    return ids.indexOf(id);\n  };\n\n  return {\n    //add an item with the info coming from getter method out of UI\n    addItem: function (type, des, val) {\n      let newItem, id; //Create new id\n\n      id = getNewID(type); //Create new Item based on inc or exp type\n\n      if (type === \"exp\") {\n        newItem = new Expense(id, des, val);\n      } else if (type === \"inc\") {\n        newItem = new Income(id, des, val);\n      } //Push into data structure\n\n\n      data.allItems[type].push(newItem);\n      return newItem;\n    },\n    //edits the data of an item\n    editItem: function (type, id, value) {\n      let index, item; //returns the index of the id we are looking for\n\n      index = getIndex(type, id);\n\n      if (index !== -1) {\n        item = data.allItems[type][index];\n        item.value = value;\n      }\n    },\n    //delete item from data object\n    deleteItem: function (type, id) {\n      let index; //returns the index of the id we are looking for\n\n      index = getIndex(type, id);\n\n      if (index !== -1) {\n        //splice removes elements from our array at position index\n        data.allItems[type].splice(index, 1);\n      }\n    },\n    deleteType: function (type) {\n      //deletes all data of type\n      data.allItems[type] = [];\n    },\n    calculateBudget: function () {\n      //calc total income and expense\n      calculateTotal(\"exp\");\n      calculateTotal(\"inc\"); //calc budget: income - expense\n\n      data.budget = data.totals.inc - data.totals.exp; //calc the percentage of income we spent\n\n      if (data.totals.inc > 0) {\n        data.percentage = Math.round(data.totals.exp / data.totals.inc * 100);\n      } else {\n        data.percentage = -1;\n      }\n    },\n    calculatePercentages: function () {\n      data.allItems.exp.forEach(function (cur) {\n        cur.calcPercentage(data.totals.inc);\n      });\n    },\n    //getter method for budget values. using object because many values\n    getBudget: function () {\n      return {\n        budget: data.budget,\n        totalInc: data.totals.inc,\n        totalExp: data.totals.exp,\n        percentage: data.percentage\n      };\n    },\n    getPercentages: function () {\n      let allPerc = data.allItems.exp.map(function (cur) {\n        return cur.getPercentage();\n      });\n      return allPerc;\n    },\n    testing: function () {\n      calculateTotal(\"exp\");\n      console.log(data);\n    }\n  };\n}(); // UI CONTROLLER\n\n\nlet UIController = function () {\n  //all classnames of html. simple to change later on\n  const DOMstrings = {\n    inputType: \".add__type\",\n    inputDesc: \".add__description\",\n    inputValue: \".add__value\",\n    inputBtn: \".add__btn\",\n    inputBtnDelInc: \".allInc__delete--btn\",\n    inputBtnDelExp: \".allExp__delete--btn\",\n    inputBtnEditInc: \".editInc__item--btn\",\n    inputBtnEditExp: \".editExp__item--btn\",\n    incomeContainer: \".income__list\",\n    expensesContainer: \".expenses__list\",\n    budgetLabel: \".budget__value\",\n    incomeLabel: \".budget__income--value\",\n    expensesLabel: \".budget__expenses--value\",\n    percentageLabel: \".budget__expenses--percentage\",\n    container: \".container\",\n    expensesPercLabel: \".item__percentage\",\n    dateLabel: \".budget__title--month\"\n  };\n\n  const formatNumber = function (num, type) {\n    let numSplit, int, newInt, dec, sign, counter;\n    /* + or - before number\r\n    \t2 decimal poiiiints\r\n    \tcomma separating thousand\r\n    */\n\n    num = Math.abs(num);\n    num = num.toFixed(2); //method from num.prototype - converts to string object\n\n    numSplit = num.split(\".\"); //converts into 2 parts and stores array\n\n    int = numSplit[0];\n    dec = numSplit[1];\n    newInt = int.substr(int.length - 1, 1); //puts the 1000 point\n\n    counter = 1;\n\n    for (let i = int.length - 2; i >= 0; i--) {\n      if (counter % 3 === 0) {\n        newInt = int.substr(i, 1) + \",\" + newInt;\n      } else {\n        newInt = int.substr(i, 1) + newInt;\n      }\n\n      counter++;\n    } //Old solution\n    //int = int.substr(0, int.length - 3) + \",\" + int.substr(int.length - 3);\n\n\n    type === \"inc\" ? sign = \"+\" : sign = \"-\";\n    return sign + \" \" + newInt + \".\" + dec;\n  }; // Custom function to use forEach on nodeList\n\n\n  const nodeListForEach = function (list, callback) {\n    for (let i = 0; i < list.length; i++) {\n      callback(list[i], i);\n    }\n  };\n\n  return {\n    // returns an object with the UI inputs\n    getInput: function () {\n      return {\n        type: document.querySelector(DOMstrings.inputType).value,\n        //either inc or exp\n        description: document.querySelector(DOMstrings.inputDesc).value,\n        value: parseFloat(document.querySelector(DOMstrings.inputValue).value)\n      };\n    },\n    // returns an object with the new inputs - - maybe from pop up box?\n    getEditInput: function () {\n      return {\n        type: document.querySelector(DOMstrings.inputType).value,\n        //either inc or exp\n        description: document.querySelector(DOMstrings.inputDesc).value,\n        value: parseFloat(document.querySelector(DOMstrings.inputValue).value)\n      };\n    },\n    addListItem: function (obj, type) {\n      let html, value;\n      value = formatNumber(obj.value, type); // Create html string with placeholder text - choose between inc and exp\n\n      if (type === \"inc\") {\n        element = DOMstrings.incomeContainer;\n        html = `<div class=\"item clearfix\" id=\"income-${obj.id}\"><div class=\"item__description\">${obj.description}</div><div class=\"right clearfix\"><div class=\"item__value\">+ ${value}</div><div class=\"item__delete\"><button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button></div></div></div>`;\n      } else if (type === \"exp\") {\n        element = DOMstrings.expensesContainer;\n        html = `<div class=\"item clearfix\" id=\"expense-${obj.id}\"><div class=\"item__description\">${obj.description}</div><div class=\"right clearfix\"><div class=\"item__value\">- ${value}</div><div class=\"item__percentage\"> 12%</div><div class=\"item__delete\"><button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button></div></div></div>`;\n      } // Insert HTML into DOM - beforeend so we have it as last element in list\n\n\n      document.querySelector(element).insertAdjacentHTML(\"beforeend\", html);\n    },\n    deleteListItem: function (selectorID) {\n      let el = document.getElementById(selectorID);\n      el.parentNode.removeChild(el);\n    },\n    deleteList: function (type) {\n      let typeContainer, ele; //chooses the right list\n\n      type === \"inc\" ? typeContainer = DOMstrings.incomeContainer : typeContainer = DOMstrings.expensesContainer; //removes children until none\n\n      ele = document.querySelector(typeContainer);\n\n      while (ele.firstChild) {\n        ele.removeChild(ele.firstChild);\n      }\n    },\n    // Clears our input fields\n    clearFields: function () {\n      document.querySelector(DOMstrings.inputDesc).value = \"\";\n      document.querySelector(DOMstrings.inputValue).value = \"\"; //Sets focus back on description field\n\n      document.querySelector(DOMstrings.inputDesc).focus();\n    },\n    // to display the calculated budget items. gets obj with 4 properties\n    displaybudget: function (obj) {\n      let type; //determine if budget is positive for format number\n\n      obj.budget > 0 ? type = \"inc\" : type = \"exp\";\n      document.querySelector(DOMstrings.budgetLabel).textContent = formatNumber(obj.budget, type);\n      document.querySelector(DOMstrings.incomeLabel).textContent = formatNumber(obj.totalInc, \"inc\");\n      document.querySelector(DOMstrings.expensesLabel).textContent = formatNumber(obj.totalExp, \"exp\");\n\n      if (obj.percentage > 0) {\n        document.querySelector(DOMstrings.percentageLabel).textContent = obj.percentage + \"%\";\n      } else {\n        document.querySelector(DOMstrings.percentageLabel).textContent = \"---\";\n      }\n    },\n    displayPercentages: function (percentages) {\n      // dont know what items exactly -> SelectorAll\n      //returns nodeList\n      let fields = document.querySelectorAll(DOMstrings.expensesPercLabel); // Custom ForEach() on nodeList gets used with anon callback func\n\n      nodeListForEach(fields, function (current, index) {\n        // If we have percentage for index we display it via textContent at the html element coming out of fields Nodelist\n        if (percentages[index] > 0) {\n          current.textContent = percentages[index] + \"%\";\n        } else {\n          current.textContent = \"---\";\n        }\n      });\n    },\n    displayMonth: function () {\n      let now, year, month, monthNames;\n      now = new Date();\n      monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      month = now.getMonth();\n      year = now.getFullYear();\n      document.querySelector(DOMstrings.dateLabel).textContent = monthNames[month] + \" \" + year;\n    },\n    //make the outlines red when expense is selected\n    changedType: function () {\n      var fields = document.querySelectorAll(DOMstrings.inputType + \",\" + DOMstrings.inputDesc + \",\" + DOMstrings.inputValue); //use our custom forEach nodelist\n\n      nodeListForEach(fields, function (cur) {\n        cur.classList.toggle(\"red-focus\");\n      });\n      document.querySelector(DOMstrings.inputBtn).classList.toggle(\"red\");\n    },\n    //making DOMstrings public\n    getDOMstrings: function () {\n      return DOMstrings;\n    }\n  };\n}(); // APP CONTROLLER\n\n\nlet controller = function (budgetCtrl, UICtrl) {\n  //function having all the eventListeners running waiting for User input\n  const setupEventListeners = function () {\n    const DOM = UIController.getDOMstrings(); //for button click on adding budget elements\n\n    document.querySelector(DOM.inputBtn).addEventListener(\"click\", ctrlAddItem); //event listener for return key. called on document object (whole page)\n\n    document.addEventListener(\"keypress\", function (event) {\n      if (event.keyCode === 13 || event.which === 13) {\n        ctrlAddItem();\n      } //bubbles up\n\n\n      document.querySelector(DOM.container).addEventListener(\"click\", ctrlDeleteItem); //event for change of type -> red outline on expenses\n\n      document.querySelector(DOM.inputType).addEventListener(\"change\", UIController.changedType); //event for delete Incomes / Expenses\n\n      document.querySelector(DOM.inputBtnDelInc).addEventListener(\"click\", ctrlDeleteListType);\n      document.querySelector(DOM.inputBtnDelExp).addEventListener(\"click\", ctrlDeleteListType);\n    });\n  }; // Function to-calc the budget\n  // seperate function because we call it on add and delete tiems\n\n\n  const updateBudget = function () {\n    //1. Calc budget\n    budgetController.calculateBudget(); //2. Return budget - getter method\n\n    let budget = budgetController.getBudget(); //3. Display on ui\n\n    UIController.displaybudget(budget);\n  };\n\n  const updatePercentages = function () {\n    //1. Calc the percentages\n    budgetController.calculatePercentages(); //2. Read them form budget Controller\n\n    let percentages = budgetController.getPercentages(); //3. Update UI with new percentages\n\n    UIController.displayPercentages(percentages);\n    console.log(percentages);\n  }; // What happens when new budget element gets added\n\n\n  const ctrlAddItem = function () {\n    let input, newItem; //1. Get field input data\n\n    input = UIController.getInput();\n    console.log(input); // Check for correct input\n\n    if (input.description !== \"\" && !isNaN(input.value) && input.value > 0) {\n      //2. Add item to the budget controller\n      //   getting the created object back from .addItem()\n      newItem = budgetController.addItem(input.type, input.description, input.value); //3. Add item to the UI\n\n      UIController.addListItem(newItem, input.type); //4. Clear fields\n\n      UIController.clearFields(); //calc and update budget\n\n      updateBudget(); //calc and update percentages\n\n      updatePercentages();\n    }\n  };\n\n  const ctrlEditItem = function () {\n    let itemID, splitID, type, id; //get input --- make item input field pop off?? somewehre else?\n\n    input = UIController.getEditInput(); //select the ItemBox\n\n    itemID = event.target.parentNode.parentNode.parentNode.parentNode.id;\n\n    if (itemID) {\n      //split returns array with 2 strings(more with more -): before&after \"-\"\n      splitID = itemID.split(\"-\");\n      type = splitID[0];\n      id = parseInt(splitID[1]); //1. edit item in data structure\n\n      budgetController.editItem(type, id, input); //2. delete item from UI\n\n      UIController.editListItem(itemID); //3. update and show new budget - use method from before\n\n      updateBudget(); //4. calc and update percentages\n\n      updatePercentages();\n    }\n  }; // Delete list items. event is the orginating bubble element\n  //not best solution since hardcoded the DOM path\n\n\n  const ctrlDeleteItem = function (event) {\n    let itemID, splitID, type, id; //selects the ItemBox via id. Has to traverse up\n\n    itemID = event.target.parentNode.parentNode.parentNode.parentNode.id; //only one id in html..on the items\n\n    if (itemID) {\n      //split returns array with 2 strings(more with more -): before&after \"-\"\n      splitID = itemID.split(\"-\");\n      type = splitID[0];\n      id = parseInt(splitID[1]); //1. delete item from data structure\n\n      budgetController.deleteItem(type, id); //2. delete item from UI\n\n      UIController.deleteListItem(itemID); //3. update and show new budget - use method from before\n\n      updateBudget(); //4. calc and update percentages\n\n      updatePercentages();\n    }\n  }; //Deletes whole list of type\n\n\n  const ctrlDeleteListType = function (event) {\n    let type;\n    console.log(event.target.parentNode.classList);\n\n    if (event.target.parentNode.classList.value === \"allInc__delete--btn\") {\n      type = \"inc\";\n    } else if (event.target.parentNode.classList.value === \"allExp__delete--btn\") {\n      type = \"exp\";\n    } // 1. Delete all objects from budgetCtrl\n\n\n    budgetController.deleteType(type); // 2. Remove items from UI\n\n    UIController.deleteList(type); // 3. Rerun budget calc perc calc\n\n    updateBudget();\n    updatePercentages();\n  };\n\n  return {\n    init: function () {\n      console.log(\"App started!\");\n      UIController.displayMonth();\n      setupEventListeners(); //make everything zero on start. inserting custom obj\n\n      UIController.displaybudget({\n        budget: 0,\n        totalInc: 0,\n        totalExp: 0,\n        percentage: -1\n      });\n    }\n  };\n}(budgetController, UIController);\n\ncontroller.init();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/view.js":
/*!*********************!*\
  !*** ./src/view.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (23);\nconst test = \"test\";\nconsole.log(test);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdmlldy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy92aWV3LmpzP2YwNzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgMjM7XHJcblxyXG5jb25zdCB0ZXN0ID0gXCJ0ZXN0XCI7XHJcbmNvbnNvbGUubG9nKHRlc3QpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUVBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/view.js\n");

/***/ })

/******/ });